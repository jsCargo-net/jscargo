/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HttpsJscargoNetSchemasJscargoExtensionsSchemaJson = HttpsJscargoNetSchemasJscargoCoreSchemaJson & {
  hls?: {
    /**
     * HLS segment duration in seconds
     */
    segmentDuration?: number;
    /**
     * Low-latency HLS
     */
    lowLatency?: boolean;
    cmaf?: {
      /**
       * CMAF segment duration in seconds
       */
      segmentDuration?: number;
      /**
       * CMAF chunk size in bytes
       */
      chunkSize?: number;
    };
  };
  dash?: {
    /**
     * DASH segment duration in seconds
     */
    segmentDuration?: number;
    /**
     * DASH profile
     */
    profile?: string;
    /**
     * Minimum buffer time in seconds
     */
    minBufferTime?: number;
    cmaf?: {
      /**
       * CMAF segment duration in seconds
       */
      segmentDuration?: number;
      /**
       * CMAF chunk size in bytes
       */
      chunkSize?: number;
    };
  };
  metadata?: {
    /**
     * Content tags
     */
    tags?: string[];
    audio?: {
      /**
       * Audio sound ID
       */
      soundId?: string;
      /**
       * Audio title
       */
      title?: string;
      /**
       * Audio artist
       */
      artist?: string;
      [k: string]: unknown;
    };
    social?: {
      /**
       * Enable comments
       */
      commentsEnabled?: boolean;
      /**
       * Call to action
       */
      cta?: string;
      /**
       * Social-specific stream type
       */
      streamType?: "duet";
      [k: string]: unknown;
    };
    commerce?: {
      /**
       * Product URL
       */
      productUrl?: string;
      /**
       * Product ID
       */
      productId?: string;
      [k: string]: unknown;
    };
    /**
     * Content category
     */
    category?: string;
    drm?: {
      /**
       * DRM type (e.g., 'widevine')
       */
      type?: string;
      /**
       * DRM license URL
       */
      licenseUrl?: string;
      /**
       * DRM key ID
       */
      keyId?: string;
      /**
       * Encryption scheme
       */
      encryptionScheme?: string;
      [k: string]: unknown;
    };
    analytics?: {
      /**
       * Analytics tracking ID
       */
      trackingId?: string;
      /**
       * Tracked events
       */
      events?: string[];
      [k: string]: unknown;
    };
    /**
     * Array of chapters
     */
    chapters?: {
      /**
       * Chapter title
       */
      title: string;
      /**
       * Chapter start time in seconds
       */
      startTime: number;
    }[];
    /**
     * Search keywords
     */
    keywords?: string[];
    /**
     * Array of interactions
     */
    interactions?: {
      /**
       * Interaction type
       */
      type: "quiz" | "overlay" | "dialogue";
      /**
       * Interaction data
       */
      data?: {
        [k: string]: unknown;
      };
      /**
       * Interaction trigger time in seconds
       */
      time: number;
    }[];
    /**
     * Content rating (e.g., 'PG-13')
     */
    rating?: string;
    compliance?: {
      /**
       * GDPR consent flag
       */
      gdprConsent?: boolean;
      /**
       * CCPA opt-out flag
       */
      ccpaOptOut?: boolean;
      [k: string]: unknown;
    };
    ads?: {
      /**
       * VAST ad URL
       */
      vastUrl?: string;
      /**
       * VPAID ad URL
       */
      vpaidUrl?: string;
      [k: string]: unknown;
    };
    /**
     * AI-specific metadata
     */
    ai?: {
      /**
       * AI generation prompt
       */
      prompt?: string;
      /**
       * AI model used (e.g., 'Grok 3')
       */
      model?: string;
      /**
       * Generation parameters (e.g., resolution, fps)
       */
      parameters?: {
        [k: string]: unknown;
      };
      /**
       * Prompt history for dynamic changes
       */
      history?: string[];
      /**
       * Conversation session ID
       */
      sessionId?: string;
      /**
       * Conversation context (e.g., 'customer support')
       */
      context?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Array of audio tracks
   */
  audioTracks?: {
    /**
     * Audio track URL
     */
    url: string;
    /**
     * Language code (e.g., 'en')
     */
    srclang: string;
    /**
     * Display label (e.g., 'English')
     */
    label: string;
    /**
     * Default audio track
     */
    default?: boolean;
    /**
     * Embedded in container
     */
    embedded?: boolean;
  }[];
};

export interface HttpsJscargoNetSchemasJscargoCoreSchemaJson {
  /**
   * JSON Schema version (defaults to version)
   */
  $schemaVersion?: string;
  /**
   * Schema version
   */
  version: string;
  metadata: {
    /**
     * Media title
     */
    title: string;
    /**
     * Media description
     */
    description?: string;
    /**
     * Duration in seconds
     */
    duration?: number;
    /**
     * Unique content ID
     */
    contentId?: string;
    /**
     * Creation timestamp
     */
    createdAt?: string;
    /**
     * Update timestamp
     */
    updatedAt?: string;
    /**
     * Expiration timestamp
     */
    expiresAt?: string;
    /**
     * Content version (e.g., '1.0.1')
     */
    contentVersion?: string;
    /**
     * Accessibility features available (e.g., described audio, sign language)
     */
    accessibility?: ("describedAudio" | "signLanguage")[];
  };
  /**
   * Array of media sources
   */
  sources: {
    /**
     * Source URL (e.g., .m3u8, .mpd, .mp3, .jpg, world API, chat log)
     */
    url: string;
    /**
     * Source type
     */
    type: "hls" | "dash" | "mp3" | "aac" | "image" | "world" | "chat";
    /**
     * MIME type of the source (e.g., 'application/x-mpegURL', 'audio/mpeg', 'application/json')
     */
    mimeType?: string;
    /**
     * Stream type, null for non-streaming
     */
    streamType?: "vod" | "live" | null;
    /**
     * Allowed country codes
     */
    geoRestrictions?: string[];
    /**
     * Per-stream DRM configuration (overrides metadata.drm)
     */
    drm?: {
      /**
       * DRM type (e.g., 'widevine')
       */
      type?: string;
      /**
       * DRM license URL
       */
      licenseUrl?: string;
      /**
       * DRM key ID
       */
      keyId?: string;
      /**
       * Encryption scheme
       */
      encryptionScheme?: string;
      [k: string]: unknown;
    };
  }[];
  /**
   * Array of media tracks
   */
  tracks?: {
    /**
     * Track file URL
     */
    url: string;
    /**
     * Language code (e.g., 'en')
     */
    srclang: string;
    /**
     * Display label (e.g., 'English')
     */
    label: string;
    /**
     * Track type
     */
    kind?: "subtitles" | "captions" | "descriptions" | "altText" | "message";
    /**
     * Track format
     */
    format?: "vtt" | "ttml" | "txt";
    /**
     * Forced track
     */
    forced?: boolean;
    /**
     * Embedded in container
     */
    embedded?: boolean;
    /**
     * Auto-generated track
     */
    autoGenerated?: boolean;
    /**
     * Role for message tracks (e.g., user or assistant)
     */
    role?: "user" | "assistant";
    extensions?: {
      /**
       * WebVTT/TTML styling
       */
      styling?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  }[];
  /**
   * Array of media variants
   */
  variants?: {
    [k: string]: unknown;
  }[];
  /**
   * URL to the poster image
   */
  poster?: string;
  /**
   * URL to a thumbnail image
   */
  thumbnail?: string;
  /**
   * Autoplay media
   */
  autoplay?: boolean;
  /**
   * Muted media
   */
  muted?: boolean;
  /**
   * Loop media
   */
  loop?: boolean;
  /**
   * Show player controls
   */
  controls?: boolean;
  /**
   * Aspect ratio (e.g., '16:9', '1:1')
   */
  aspectRatio?: string;
  /**
   * Start time in seconds
   */
  startTime?: number;
  auth?: {
    /**
     * Auth type
     */
    type: "jwt" | "bearer" | "oauth";
    /**
     * Auth token
     */
    token: string;
  };
}
